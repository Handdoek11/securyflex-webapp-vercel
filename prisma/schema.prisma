generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       String                    @id @default(cuid())
  email                    String                    @unique
  password                 String
  name                     String
  phone                    String?
  role                     UserRole
  status                   AccountStatus             @default(PENDING)
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  failedLoginAttempts      Int                       @default(0)
  lastFailedLogin          DateTime?
  lockedUntil              DateTime?
  accounts                 Account[]
  bedrijfProfile           BedrijfProfile?
  conversationParticipants ConversationParticipant[]
  documentVerificaties     DocumentVerificatie[]
  messages                 Message[]
  notifications            Notification[]
  feedbackGiven            OpdrachtFeedback[]
  opdrachtgever            Opdrachtgever?
  passwordResetTokens      PasswordResetToken[]
  reviewsReceived          Review[]                  @relation("ReviewsReceived")
  reviewsGiven             Review[]                  @relation("ReviewsGiven")
  sessions                 Session[]
  verificationTokens       VerificationToken[]
  zzpProfile               ZZPProfile?
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model ZZPProfile {
  id                      String                 @id @default(cuid())
  userId                  String                 @unique
  kvkNummer               String                 @unique
  btwNummer               String?
  specialisaties          String[]
  certificaten            String[]
  werkgebied              String[]
  beschikbaarheid         Json
  uurtarief               Decimal                @db.Decimal(10, 2)
  rating                  Decimal?               @db.Decimal(2, 1)
  totalReviews            Int                    @default(0)
  subscriptionId          String?
  trialEndsAt             DateTime?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  finqleMerchantId        String?                @unique
  finqleOnboarded         Boolean                @default(false)
  ndNummer                String?                @unique
  ndNummerLaatsteControle DateTime?
  ndNummerOpmerking       String?
  ndNummerStatus          NDNummerStatus         @default(NIET_GEREGISTREERD)
  ndNummerVervalDatum     DateTime?
  voornaam                String                 @db.VarChar(255)
  achternaam              String                 @db.VarChar(255)
  teamMemberships         BedrijfTeamLid[]
  facturen                Factuur[]
  ndNummerAuditLogs       NDNummerAuditLog[]     @relation("ZZPNDNummerAuditLogs")
  sollicitaties           OpdrachtSollicitatie[]
  verzekeringAanvragen    VerzekeringAanvraag[]
  werkuren                Werkuur[]
  subscription            Subscription?          @relation(fields: [subscriptionId], references: [id])
  user                    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  verzekeringProfile      ZZPVerzekeringProfile?
}

model BedrijfProfile {
  id                      String                 @id @default(cuid())
  userId                  String                 @unique
  bedrijfsnaam            String
  kvkNummer               String                 @unique
  btwNummer               String
  teamSize                Int                    @default(1)
  extraAccounts           Int                    @default(0)
  subscriptionTier        SubscriptionTier       @default(SMALL)
  subscriptionId          String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  finqleCreditLimit       Decimal?               @db.Decimal(10, 2)
  finqleDebtorId          String?                @unique
  ndNummer                String?                @unique
  ndNummerLaatsteControle DateTime?
  ndNummerManagers        Json?
  ndNummerOpmerking       String?
  ndNummerStatus          NDNummerStatus         @default(NIET_GEREGISTREERD)
  ndNummerVervalDatum     DateTime?
  subscription            Subscription?          @relation(fields: [subscriptionId], references: [id])
  user                    User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamLeden               BedrijfTeamLid[]
  facturen                Factuur[]
  kredietLimiet           FinqleKredietLimiet?
  medewerkers             Medewerker[]
  ndNummerAuditLogs       NDNummerAuditLog[]     @relation("BedrijfNDNummerAuditLogs")
  acceptedOpdrachten      Opdracht[]             @relation("AcceptedOpdrachten")
  createdOpdrachten       Opdracht[]             @relation("CreatedOpdrachten")
  sollicitaties           OpdrachtSollicitatie[] @relation("BedrijfSollicitaties")
  verzamelFacturen        VerzamelFactuur[]
}

model Opdrachtgever {
  id                String               @id @default(cuid())
  userId            String               @unique
  bedrijfsnaam      String
  kvkNummer         String?
  contactpersoon    String
  totalHoursBooked  Decimal              @default(0) @db.Decimal(10, 2)
  totalSpent        Decimal              @default(0) @db.Decimal(10, 2)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  finqleCreditLimit Decimal?             @db.Decimal(10, 2)
  finqleDebtorId    String?              @unique
  kredietLimiet     FinqleKredietLimiet?
  opdrachten        Opdracht[]
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  verzamelFacturen  VerzamelFactuur[]
}

model Opdracht {
  id                String                 @id @default(cuid())
  titel             String
  beschrijving      String
  locatie           String
  startDatum        DateTime
  eindDatum         DateTime
  aantalBeveiligers Int
  uurtarief         Decimal                @db.Decimal(10, 2)
  status            OpdrachtStatus         @default(OPEN)
  opdrachtgeverId   String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  acceptedBedrijfId String?
  autoAccept        Boolean                @default(false)
  creatorBedrijfId  String?
  creatorId         String
  creatorType       CreatorType
  directZZPAllowed  Boolean                @default(true)
  isUrgent          Boolean                @default(false)
  minTeamSize       Int?
  targetAudience    TargetAudience         @default(BEIDEN)
  type              String?
  vereisten         String[]
  conversations     Conversation[]
  acceptedBedrijf   BedrijfProfile?        @relation("AcceptedOpdrachten", fields: [acceptedBedrijfId], references: [id])
  creatorBedrijf    BedrijfProfile?        @relation("CreatedOpdrachten", fields: [creatorBedrijfId], references: [id])
  opdrachtgever     Opdrachtgever?         @relation(fields: [opdrachtgeverId], references: [id])
  assignments       OpdrachtAssignment[]
  feedback          OpdrachtFeedback[]
  sollicitaties     OpdrachtSollicitatie[]
  reviews           Review[]
  werkuren          Werkuur[]
}

model OpdrachtSollicitatie {
  id                String             @id @default(cuid())
  opdrachtId        String
  sollicitantType   SollicitantType
  zzpId             String?
  bedrijfId         String?
  status            SollicitatieStatus @default(PENDING)
  motivatie         String?
  voorgesteldTarief Decimal?           @db.Decimal(10, 2)
  teamGrootte       Int?
  sollicitatiedatum DateTime           @default(now())
  beoordeeldOp      DateTime?
  beoordeeldDoor    String?
  bedrijf           BedrijfProfile?    @relation("BedrijfSollicitaties", fields: [bedrijfId], references: [id])
  opdracht          Opdracht           @relation(fields: [opdrachtId], references: [id])
  zzp               ZZPProfile?        @relation(fields: [zzpId], references: [id])

  @@unique([opdrachtId, zzpId])
  @@unique([opdrachtId, bedrijfId])
}

model Subscription {
  id               String           @id @default(cuid())
  tier             SubscriptionTier
  price            Decimal          @db.Decimal(10, 2)
  externalId       String?          @unique
  status           String
  currentPeriodEnd DateTime
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  bedrijfProfiles  BedrijfProfile[]
  zzpProfiles      ZZPProfile[]
}

model Werkuur {
  id                     String             @id @default(cuid())
  opdrachtId             String
  startTijd              DateTime
  eindTijd               DateTime?
  startLocatie           Json
  eindLocatie            Json?
  urenGewerkt            Decimal            @db.Decimal(10, 2)
  uurtarief              Decimal            @db.Decimal(10, 2)
  platformFee            Decimal            @default(2.99) @db.Decimal(10, 2)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  directPaymentRequested Boolean            @default(false)
  factorFee              Decimal?           @db.Decimal(10, 2)
  medewerkerId           String?
  verzamelFactuurId      String?
  zzpId                  String?
  status                 WerkuurStatus      @default(PENDING)
  finqleTransaction      FinqleTransaction?
  opdracht               Opdracht           @relation(fields: [opdrachtId], references: [id])
  verzamelFactuur        VerzamelFactuur?   @relation(fields: [verzamelFactuurId], references: [id])
  zzp                    ZZPProfile?        @relation(fields: [zzpId], references: [id])
}

model VerzamelFactuur {
  id                String              @id @default(cuid())
  weekNummer        Int
  jaar              Int
  factuurNummer     String              @unique
  opdrachtgeverId   String?
  bedrijfId         String?
  finqleInvoiceId   String?             @unique
  kredietGebruikt   Decimal             @default(0) @db.Decimal(10, 2)
  subtotaal         Decimal             @db.Decimal(10, 2)
  platformFees      Decimal             @db.Decimal(10, 2)
  totaalBedrag      Decimal             @db.Decimal(10, 2)
  status            FactuurStatus       @default(PENDING)
  createdAt         DateTime            @default(now())
  dueDate           DateTime
  paidAt            DateTime?
  betalingen        Betaling[]
  finqleTransacties FinqleTransaction[]
  bedrijf           BedrijfProfile?     @relation(fields: [bedrijfId], references: [id])
  opdrachtgever     Opdrachtgever?      @relation(fields: [opdrachtgeverId], references: [id])
  werkuren          Werkuur[]

  @@index([weekNummer, jaar])
  @@index([opdrachtgeverId])
  @@index([bedrijfId])
}

model FinqleKredietLimiet {
  id              String          @id @default(cuid())
  opdrachtgeverId String?         @unique
  bedrijfId       String?         @unique
  kredietLimiet   Decimal         @db.Decimal(10, 2)
  gebruiktKrediet Decimal         @default(0) @db.Decimal(10, 2)
  beschikbaar     Decimal         @db.Decimal(10, 2)
  finqleDebtorId  String          @unique
  lastSyncAt      DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  bedrijf         BedrijfProfile? @relation(fields: [bedrijfId], references: [id])
  opdrachtgever   Opdrachtgever?  @relation(fields: [opdrachtgeverId], references: [id])
}

model Review {
  id            String    @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime  @default(now())
  aspectRatings Json?
  isPublic      Boolean   @default(true)
  opdrachtId    String?
  response      String?
  responseAt    DateTime?
  reviewedId    String
  reviewerId    String
  updatedAt     DateTime  @updatedAt
  opdracht      Opdracht? @relation(fields: [opdrachtId], references: [id])
  reviewed      User      @relation("ReviewsReceived", fields: [reviewedId], references: [id])
  reviewer      User      @relation("ReviewsGiven", fields: [reviewerId], references: [id])

  @@unique([reviewerId, reviewedId, opdrachtId])
}

model Medewerker {
  id        String         @id @default(cuid())
  email     String         @unique
  naam      String
  functie   String
  bedrijfId String
  createdAt DateTime       @default(now())
  bedrijf   BedrijfProfile @relation(fields: [bedrijfId], references: [id])
}

model Factuur {
  id        String          @id @default(cuid())
  nummer    String          @unique
  bedrag    Decimal         @db.Decimal(10, 2)
  status    String
  zzpId     String?
  bedrijfId String?
  createdAt DateTime        @default(now())
  bedrijf   BedrijfProfile? @relation(fields: [bedrijfId], references: [id])
  zzp       ZZPProfile?     @relation(fields: [zzpId], references: [id])
}

model Betaling {
  id                String           @id @default(cuid())
  bedrag            Decimal          @db.Decimal(10, 2)
  methode           String?
  createdAt         DateTime         @default(now())
  betalerId         String
  betalerType       BetalerType
  finqleReferentie  String?
  ontvangerId       String
  ontvangerType     OntvangerType
  paidAt            DateTime?
  status            PaymentStatus    @default(PENDING)
  type              BetalingType
  verzamelFactuurId String?
  verzamelFactuur   VerzamelFactuur? @relation(fields: [verzamelFactuurId], references: [id])
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BedrijfTeamLid {
  id          String               @id @default(cuid())
  bedrijfId   String
  zzpId       String
  role        TeamRole             @default(MEMBER)
  status      TeamStatus           @default(INVITED)
  joinedAt    DateTime?
  createdAt   DateTime             @default(now())
  bedrijf     BedrijfProfile       @relation(fields: [bedrijfId], references: [id])
  zzp         ZZPProfile           @relation(fields: [zzpId], references: [id])
  assignments OpdrachtAssignment[]

  @@unique([bedrijfId, zzpId])
}

model OpdrachtAssignment {
  id         String           @id @default(cuid())
  opdrachtId String
  teamLidId  String
  assignedBy String
  assignedAt DateTime         @default(now())
  status     AssignmentStatus @default(ASSIGNED)
  opdracht   Opdracht         @relation(fields: [opdrachtId], references: [id])
  teamLid    BedrijfTeamLid   @relation(fields: [teamLidId], references: [id])

  @@unique([opdrachtId, teamLidId])
}

model FinqleTransaction {
  id                String                @id @default(cuid())
  werkuurId         String?               @unique
  merchantId        String
  debtorId          String
  amount            Decimal               @db.Decimal(10, 2)
  directPayment     Boolean               @default(false)
  finqleRequestId   String?
  finqleInvoiceId   String?
  status            PaymentStatus         @default(PENDING)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  factorFee         Decimal?              @db.Decimal(10, 2)
  failureReason     String?
  netAmount         Decimal               @db.Decimal(10, 2)
  paidAt            DateTime?
  platformFee       Decimal               @default(2.99) @db.Decimal(10, 2)
  requestedAt       DateTime              @default(now())
  transactionType   FinqleTransactionType
  verzamelFactuurId String?
  verzamelFactuur   VerzamelFactuur?      @relation(fields: [verzamelFactuurId], references: [id])
  werkuur           Werkuur?              @relation(fields: [werkuurId], references: [id])
}

model Conversation {
  id            String                    @id @default(cuid())
  type          ConversationType          @default(DIRECT)
  title         String?
  opdrachtId    String?
  lastMessageAt DateTime?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  opdracht      Opdracht?                 @relation(fields: [opdrachtId], references: [id])
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  unreadCount    Int          @default(0)
  lastReadAt     DateTime?
  isActive       Boolean      @default(true)
  joinedAt       DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  type           MessageType  @default(TEXT)
  attachments    Json?
  metadata       Json?
  isEdited       Boolean      @default(false)
  editedAt       DateTime?
  isDeleted      Boolean      @default(false)
  deletedAt      DateTime?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model Notification {
  id          String               @id @default(cuid())
  userId      String
  type        NotificationType
  category    NotificationCategory
  title       String
  message     String
  isRead      Boolean              @default(false)
  readAt      DateTime?
  actionUrl   String?
  actionLabel String?
  metadata    Json?
  createdAt   DateTime             @default(now())
  user        User                 @relation(fields: [userId], references: [id])
}

model OpdrachtFeedback {
  id                 String       @id @default(cuid())
  opdrachtId         String
  authorId           String
  type               FeedbackType
  rating             Int?
  qualityScore       Int?
  communicationScore Int?
  valueScore         Int?
  positives          String[]
  improvements       String[]
  comment            String?
  requiresAction     Boolean      @default(false)
  actionTaken        String?
  actionBy           String?
  actionAt           DateTime?
  createdAt          DateTime     @default(now())
  author             User         @relation(fields: [authorId], references: [id])
  opdracht           Opdracht     @relation(fields: [opdrachtId], references: [id])
}

model VerzekeringCategorie {
  id           String               @id @default(cuid())
  naam         String               @unique
  beschrijving String
  sortOrder    Int                  @default(0)
  isActief     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  producten    VerzekeringProduct[]

  @@index([sortOrder])
}

model VerzekeringProduct {
  id                String                      @id @default(cuid())
  naam              String
  beschrijving      String
  korteBeschrijving String?
  categorieId       String
  verzekeraar       String
  verzekeraarLogo   String?
  basispremie       Decimal?                    @db.Decimal(10, 2)
  kortingPercentage Decimal                     @default(0) @db.Decimal(5, 2)
  vereisteBasisdata Json
  productFeatures   String[]
  externalProductId String?
  apiEndpoint       String?
  isActief          Boolean                     @default(true)
  isFeatured        Boolean                     @default(false)
  sortOrder         Int                         @default(0)
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  aanvragen         VerzekeringAanvraag[]
  categorie         VerzekeringCategorie        @relation(fields: [categorieId], references: [id])
  kortingen         VerzekeringProductKorting[]

  @@unique([categorieId, naam])
  @@index([isActief, isFeatured])
  @@index([categorieId, sortOrder])
}

model VerzekeringKorting {
  id                String                      @id @default(cuid())
  code              String                      @unique
  naam              String
  beschrijving      String?
  kortingType       KortingType
  waarde            Decimal                     @db.Decimal(10, 2)
  geldigVan         DateTime
  geldigTot         DateTime
  maxGebruik        Int?
  gebruiktAantal    Int                         @default(0)
  maxPerGebruiker   Int                         @default(1)
  minAbonnementDuur Int?
  nieuweKlantenOnly Boolean                     @default(false)
  isActief          Boolean                     @default(true)
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime                    @updatedAt
  aanvragen         VerzekeringAanvraag[]
  producten         VerzekeringProductKorting[]

  @@index([code])
  @@index([geldigVan, geldigTot])
}

model VerzekeringProductKorting {
  id        String             @id @default(cuid())
  productId String
  kortingId String
  korting   VerzekeringKorting @relation(fields: [kortingId], references: [id], onDelete: Cascade)
  product   VerzekeringProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, kortingId])
}

model VerzekeringAanvraag {
  id               String                    @id @default(cuid())
  zzpId            String
  productId        String
  kortingId        String?
  kortingCode      String?
  aanvraagData     Json
  offertePremie    Decimal?                  @db.Decimal(10, 2)
  platformKorting  Decimal?                  @db.Decimal(10, 2)
  codeKorting      Decimal?                  @db.Decimal(10, 2)
  finaalPremie     Decimal?                  @db.Decimal(10, 2)
  externalRef      String?
  offerteUrl       String?
  status           VerzekeringAanvraagStatus @default(CONCEPT)
  statusReden      String?
  notificatiesSent Json?
  laatsteContact   DateTime?
  ipAdres          String?
  userAgent        String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  korting          VerzekeringKorting?       @relation(fields: [kortingId], references: [id])
  product          VerzekeringProduct        @relation(fields: [productId], references: [id])
  zzp              ZZPProfile                @relation(fields: [zzpId], references: [id])

  @@index([zzpId, status])
  @@index([productId, status])
  @@index([status, createdAt])
}

model ZZPVerzekeringProfile {
  id                  String          @id @default(cuid())
  zzpId               String          @unique
  intereseCategorieen String[]
  budgetRange         String?
  contactVoorkeur     ContactVoorkeur @default(EMAIL)
  marketingOptIn      Boolean         @default(true)
  totaalAanvragen     Int             @default(0)
  totaalAfgesloten    Int             @default(0)
  laatsteActiviteit   DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  zzp                 ZZPProfile      @relation(fields: [zzpId], references: [id])
}

model DocumentVerificatie {
  id                  String                        @id @default(cuid())
  userId              String
  documentType        DocumentType
  documentNummer      String?
  fileName            String
  originalFileName    String
  fileUrl             String
  fileSize            Int
  mimeType            String
  status              VerificatieStatus             @default(PENDING)
  adminNotes          String?
  verificatieDatum    DateTime?
  verifiedBy          String?
  rejectionReason     String?
  geldigTot           DateTime?
  expiryWarnings      Int                           @default(0)
  lastExpiryWarning   DateTime?
  externalVerified    Boolean                       @default(false)
  externalSource      String?
  externalRef         String?
  uploadedAt          DateTime                      @default(now())
  ipAddress           String?
  userAgent           String?
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  user                User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationHistory DocumentVerificationHistory[]

  @@index([userId, documentType])
  @@index([status])
  @@index([geldigTot])
  @@index([documentType, status])
  @@index([verifiedBy])
}

model DocumentVerificationHistory {
  id              String              @id @default(cuid())
  documentId      String
  action          VerificationAction
  oldStatus       VerificatieStatus?
  newStatus       VerificatieStatus
  adminNotes      String?
  performedBy     String
  performedByName String
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime            @default(now())
  document        DocumentVerificatie @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([performedBy])
  @@index([createdAt])
}

model DocumentTemplate {
  id                 String       @id @default(cuid())
  documentType       DocumentType @unique
  naam               String
  beschrijving       String
  vereist            Boolean      @default(false)
  verificatieStappen String[]
  echtheidskenmerken String[]
  externalUrls       Json?
  contactInfo        Json?
  geldigheid         Int?
  waarschuwingen     Int[]        @default([90, 30, 7])
  acceptedFormats    String[]     @default(["pdf", "jpg", "jpeg", "png"])
  maxFileSize        Int          @default(10485760)
  sortOrder          Int          @default(0)
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@index([isActive, sortOrder])
}

model SecurityLog {
  id        String            @id @default(cuid())
  userId    String?
  email     String?
  eventType SecurityEventType
  ipAddress String?
  userAgent String?
  metadata  Json?
  createdAt DateTime          @default(now())

  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

model NDNummerAuditLog {
  id                 String          @id @default(cuid())
  profileType        NDProfileType
  zzpProfileId       String?
  bedrijfProfileId   String?
  ndNummer           String?
  previousStatus     NDNummerStatus?
  newStatus          NDNummerStatus
  action             NDNummerAction
  performedBy        String?
  verificationSource String?
  expiryDate         DateTime?
  nextCheckDue       DateTime?
  complianceNotes    String?
  ipAddress          String?
  userAgent          String?
  apiResponse        Json?
  createdAt          DateTime        @default(now())
  bedrijfProfile     BedrijfProfile? @relation("BedrijfNDNummerAuditLogs", fields: [bedrijfProfileId], references: [id])
  zzpProfile         ZZPProfile?     @relation("ZZPNDNummerAuditLogs", fields: [zzpProfileId], references: [id])

  @@index([profileType])
  @@index([zzpProfileId])
  @@index([bedrijfProfileId])
  @@index([ndNummer])
  @@index([action])
  @@index([newStatus])
  @@index([createdAt])
  @@index([expiryDate])
}

enum UserRole {
  ZZP_BEVEILIGER
  BEDRIJF
  OPDRACHTGEVER
  ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum SubscriptionTier {
  ZZP
  SMALL
  MEDIUM
  LARGE
}

enum OpdrachtStatus {
  OPEN
  TOEGEWEZEN
  BEZIG
  AFGEROND
  GEANNULEERD
  URGENT
}

enum CreatorType {
  OPDRACHTGEVER
  BEDRIJF
}

enum TargetAudience {
  ALLEEN_BEDRIJVEN
  ALLEEN_ZZP
  BEIDEN
  EIGEN_TEAM
}

enum SollicitantType {
  ZZP_BEVEILIGER
  BEDRIJF
}

enum SollicitatieStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum TeamRole {
  OWNER
  TEAMLEAD
  MEMBER
}

enum TeamStatus {
  INVITED
  ACTIVE
  INACTIVE
}

enum AssignmentStatus {
  ASSIGNED
  CONFIRMED
  DECLINED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  APPROVED
  PAID
  FAILED
  REFUNDED
}

enum ConversationType {
  DIRECT
  GROUP
  OPDRACHT
  SUPPORT
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  LOCATION
  SYSTEM
  ASSIGNMENT
}

enum NotificationType {
  OPDRACHT_NEW
  OPDRACHT_ASSIGNED
  OPDRACHT_UPDATED
  OPDRACHT_CANCELLED
  TEAM_INVITED
  TEAM_ACCEPTED
  MESSAGE_NEW
  REVIEW_RECEIVED
  PAYMENT_RECEIVED
  PAYMENT_PENDING
  WERKUUR_APPROVED
  WERKUUR_DISPUTED
  SYSTEM_ANNOUNCEMENT
}

enum NotificationCategory {
  OPDRACHT
  TEAM
  PAYMENT
  MESSAGE
  REVIEW
  SYSTEM
}

enum FeedbackType {
  OPDRACHTGEVER_TO_BEDRIJF
  BEDRIJF_TO_OPDRACHTGEVER
  BEDRIJF_TO_ZZP
  ZZP_TO_BEDRIJF
  PLATFORM_QUALITY_CHECK
}

enum WerkuurStatus {
  PENDING
  APPROVED
  DISPUTED
  INVOICED
  PAID
}

enum FactuurStatus {
  PENDING
  SENT
  OVERDUE
  PAID
  PARTIALLY_PAID
  CANCELLED
}

enum BetalingType {
  INVOICE_PAYMENT
  DIRECT_PAYMENT
  MARGIN_PAYMENT
  SUBSCRIPTION
  REFUND
}

enum BetalerType {
  OPDRACHTGEVER
  BEDRIJF
  FINQLE
  PLATFORM
  ZZP
}

enum OntvangerType {
  ZZP
  BEDRIJF
  PLATFORM
  FINQLE
  OPDRACHTGEVER
}

enum FinqleTransactionType {
  DIRECT_PAYMENT
  INVOICE_PAYMENT
  MARGIN_PAYMENT
  FEE_PAYMENT
}

enum KortingType {
  PERCENTAGE
  VAST_BEDRAG
}

enum VerzekeringAanvraagStatus {
  CONCEPT
  AANGEVRAAGD
  OFFERTE
  GEACCEPTEERD
  AFGEWEZEN
  GEANNULEERD
  ACTIEF
  VERLOPEN
}

enum ContactVoorkeur {
  EMAIL
  TELEFOON
  SMS
}

enum NDNummerStatus {
  NIET_GEREGISTREERD
  AANGEVRAAGD
  PENDING_VERIFICATIE
  ACTIEF
  VERLOPEN
  INGETROKKEN
  GESCHORST
  GEWEIGERD
}

enum NDProfileType {
  ZZP
  BEDRIJF
}

enum NDNummerAction {
  REGISTRATIE
  VERIFICATIE
  HERNIEUWING
  STATUS_WIJZIGING
  DOCUMENTEN_UPLOAD
  HERINNERING_VERSTUURD
  AUTOMATISCHE_CHECK
  HANDMATIGE_UPDATE
  GESCHORST
  HERSTELD
  INGETROKKEN
}

enum DocumentType {
  IDENTITEITSBEWIJS
  PASPOORT
  RIJBEWIJS
  KVK_UITTREKSEL
  BTW_NUMMER
  ND_NUMMER
  LEGITIMATIEBEWIJS
  TOESTEMMINGSBEWIJS
  VOG_P_CERTIFICAAT
  SVPB_DIPLOMA_BEVEILIGER
  SVPB_CERTIFICAAT_PERSOONSBEVEILIGING
  SVPB_CERTIFICAAT_WINKELSURVEILLANCE
  SVPB_CERTIFICAAT_EVENT_SECURITY
  SVPB_CERTIFICAAT_CENTRALIST
  BOA_CERTIFICAAT
  BHV_CERTIFICAAT
  KNVB_STEWARD
  HORECA_PORTIER
  MBV_CERTIFICAAT
  TBV_CERTIFICAAT
  VERZEKERINGSBEWIJS
  BANKGEGEVENS
  IBAN_BEWIJS
  CONTRACT
  ARBEIDSOVEREENKOMST
  FREELANCER_OVEREENKOMST
  DIPLOMA_OVERIG
  CERTIFICAAT_OVERIG
  OVERIGE
}

enum VerificatieStatus {
  PENDING
  IN_REVIEW
  ADDITIONAL_INFO
  APPROVED
  REJECTED
  EXPIRED
  NEEDS_RENEWAL
  SUSPENDED
}

enum VerificationAction {
  UPLOADED
  REVIEW_STARTED
  APPROVED
  REJECTED
  INFO_REQUESTED
  UPDATED
  EXPIRED
  RENEWED
  DELETED
  NOTE_ADDED
}

enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILED
  LOGOUT
  PASSWORD_RESET_REQUEST
  PASSWORD_RESET_COMPLETED
  EMAIL_VERIFICATION_REQUEST
  EMAIL_VERIFICATION_COMPLETED
  ACCOUNT_LOCKED
  ACCOUNT_UNLOCKED
  SUSPICIOUS_ACTIVITY
}
